package main

import (
	"context"
	"fmt"

	"cloud.google.com/go/firestore"
	tts "cloud.google.com/go/texttospeech/apiv1"
	"cloud.google.com/go/translate"
	"talkliketv.click/tltv/internal/models"
)

// GoogleProvider implements VoiceProvider for Google Cloud TTS
type GoogleProvider struct {
	ttsClient       *tts.Client
	transClient     *translate.Client
	firestoreClient *firestore.Client
}

// NewGoogleProvider creates a new GoogleProvider instance with all necessary clients
func NewGoogleProvider(ctx context.Context, firestoreClient *firestore.Client) (*GoogleProvider, error) {
	ttsClient, err := tts.NewClient(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to create TTS client: %w", err)
	}

	transClient, err := translate.NewClient(ctx)
	if err != nil {
		ttsClient.Close()
		return nil, fmt.Errorf("failed to create translate client: %w", err)
	}

	return &GoogleProvider{
		ttsClient:       ttsClient,
		transClient:     transClient,
		firestoreClient: firestoreClient,
	}, nil
}

// Close closes all client connections
func (p *GoogleProvider) Close() {
	if p.ttsClient != nil {
		p.ttsClient.Close()
	}
	if p.transClient != nil {
		p.transClient.Close()
	}
}

// GetVoices retrieves all available voices and language information
func (p *GoogleProvider) GetVoices(ctx context.Context, outputDir string) ([]models.Voice, map[string]string, error) {
	// Get language data
	languageMap, err := p.getLanguageMap(ctx)
	if err != nil {
		return nil, nil, err
	}

	// Get existing records from Firestore
	existingLanguages, existingVoices, existingLanguageCodes, err := p.getExistingRecords(ctx)
	if err != nil {
		return nil, nil, err
	}

	voicesToKeep := p.getFilteredVoices(ctx, outputDir)

	// Fetch and process Google voices
	googleVoices, voicesToAdd, languagesToAdd, languageCodesToAdd, err := p.processAndFilterVoices(ctx, languageMap, voicesToKeep, existingLanguages, existingVoices, existingLanguageCodes)
	if err != nil {
		return nil, nil, err
	}

	// Add new voices and languages to Firestore if needed
	if err := p.addNewRecordsToFirestore(ctx, voicesToAdd, languagesToAdd, languageCodesToAdd); err != nil {
		return nil, nil, err
	}

	return googleVoices, languageMap, nil
}

// CreateSampleMP3 creates a sample MP3 file for a given voice
func (p *GoogleProvider) CreateSampleMP3(ctx context.Context, voice models.Voice, langName string, outputDir string) error {
	return p.createSampleMP3(ctx, voice, langName, outputDir)
} 