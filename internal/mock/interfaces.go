// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interfaces/interfaces.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/interfaces.go -source=internal/interfaces/interfaces.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	interfaces "talkliketv.com/tltv/internal/interfaces"
)

// MockModelsStore is a mock of ModelsStore interface.
type MockModelsStore struct {
	ctrl     *gomock.Controller
	recorder *MockModelsStoreMockRecorder
	isgomock struct{}
}

// MockModelsStoreMockRecorder is the mock recorder for MockModelsStore.
type MockModelsStoreMockRecorder struct {
	mock *MockModelsStore
}

// NewMockModelsStore creates a new mock instance.
func NewMockModelsStore(ctrl *gomock.Controller) *MockModelsStore {
	mock := &MockModelsStore{ctrl: ctrl}
	mock.recorder = &MockModelsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelsStore) EXPECT() *MockModelsStoreMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockModelsStore) AddToken(ctx context.Context, token interfaces.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockModelsStoreMockRecorder) AddToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockModelsStore)(nil).AddToken), ctx, token)
}

// CheckToken mocks base method.
func (m *MockModelsStore) CheckToken(c context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", c, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockModelsStoreMockRecorder) CheckToken(c, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockModelsStore)(nil).CheckToken), c, token)
}

// DeleteToken mocks base method.
func (m *MockModelsStore) DeleteToken(ctx context.Context, hash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", ctx, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockModelsStoreMockRecorder) DeleteToken(ctx, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockModelsStore)(nil).DeleteToken), ctx, hash)
}

// GetLanguage mocks base method.
func (m *MockModelsStore) GetLanguage(ctx context.Context, code string) (interfaces.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage", ctx, code)
	ret0, _ := ret[0].(interfaces.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockModelsStoreMockRecorder) GetLanguage(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockModelsStore)(nil).GetLanguage), ctx, code)
}

// GetLanguageCode mocks base method.
func (m *MockModelsStore) GetLanguageCode(ctx context.Context, code string) (interfaces.LanguageCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageCode", ctx, code)
	ret0, _ := ret[0].(interfaces.LanguageCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageCode indicates an expected call of GetLanguageCode.
func (mr *MockModelsStoreMockRecorder) GetLanguageCode(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageCode", reflect.TypeOf((*MockModelsStore)(nil).GetLanguageCode), ctx, code)
}

// GetLanguageCodes mocks base method.
func (m *MockModelsStore) GetLanguageCodes(ctx context.Context) ([]interfaces.LanguageCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageCodes", ctx)
	ret0, _ := ret[0].([]interfaces.LanguageCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageCodes indicates an expected call of GetLanguageCodes.
func (mr *MockModelsStoreMockRecorder) GetLanguageCodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageCodes", reflect.TypeOf((*MockModelsStore)(nil).GetLanguageCodes), ctx)
}

// GetVoice mocks base method.
func (m *MockModelsStore) GetVoice(ctx context.Context, name string) (interfaces.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoice", ctx, name)
	ret0, _ := ret[0].(interfaces.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoice indicates an expected call of GetVoice.
func (mr *MockModelsStoreMockRecorder) GetVoice(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoice", reflect.TypeOf((*MockModelsStore)(nil).GetVoice), ctx, name)
}

// GetVoices mocks base method.
func (m *MockModelsStore) GetVoices(ctx context.Context) ([]interfaces.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoices", ctx)
	ret0, _ := ret[0].([]interfaces.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoices indicates an expected call of GetVoices.
func (mr *MockModelsStoreMockRecorder) GetVoices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoices", reflect.TypeOf((*MockModelsStore)(nil).GetVoices), ctx)
}

// UpdateTokenField mocks base method.
func (m *MockModelsStore) UpdateTokenField(c context.Context, value any, token, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenField", c, value, token, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTokenField indicates an expected call of UpdateTokenField.
func (mr *MockModelsStoreMockRecorder) UpdateTokenField(c, value, token, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenField", reflect.TypeOf((*MockModelsStore)(nil).UpdateTokenField), c, value, token, path)
}
