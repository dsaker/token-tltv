// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/translates/googleclients.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/googleclients.go -source=internal/services/translates/googleclients.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	texttospeechpb "cloud.google.com/go/texttospeech/apiv1/texttospeechpb"
	translate "cloud.google.com/go/translate"
	gax "github.com/googleapis/gax-go/v2"
	gomock "go.uber.org/mock/gomock"
	language "golang.org/x/text/language"
	interfaces "talkliketv.com/tltv/internal/interfaces"
)

// MockTTSClientInterface is a mock of TTSClientInterface interface.
type MockTTSClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTTSClientInterfaceMockRecorder
	isgomock struct{}
}

// MockTTSClientInterfaceMockRecorder is the mock recorder for MockTTSClientInterface.
type MockTTSClientInterfaceMockRecorder struct {
	mock *MockTTSClientInterface
}

// NewMockTTSClientInterface creates a new mock instance.
func NewMockTTSClientInterface(ctrl *gomock.Controller) *MockTTSClientInterface {
	mock := &MockTTSClientInterface{ctrl: ctrl}
	mock.recorder = &MockTTSClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTTSClientInterface) EXPECT() *MockTTSClientInterfaceMockRecorder {
	return m.recorder
}

// DetectLanguage mocks base method.
func (m *MockTTSClientInterface) DetectLanguage(ctx context.Context, texts []string) (language.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectLanguage", ctx, texts)
	ret0, _ := ret[0].(language.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectLanguage indicates an expected call of DetectLanguage.
func (mr *MockTTSClientInterfaceMockRecorder) DetectLanguage(ctx, texts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLanguage", reflect.TypeOf((*MockTTSClientInterface)(nil).DetectLanguage), ctx, texts)
}

// ProcessPhrase mocks base method.
func (m *MockTTSClientInterface) ProcessPhrase(ctx context.Context, phrase interfaces.Phrase, params *texttospeechpb.VoiceSelectionParams) (*texttospeechpb.SynthesizeSpeechResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPhrase", ctx, phrase, params)
	ret0, _ := ret[0].(*texttospeechpb.SynthesizeSpeechResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPhrase indicates an expected call of ProcessPhrase.
func (mr *MockTTSClientInterfaceMockRecorder) ProcessPhrase(ctx, phrase, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPhrase", reflect.TypeOf((*MockTTSClientInterface)(nil).ProcessPhrase), ctx, phrase, params)
}

// TranslateTexts mocks base method.
func (m *MockTTSClientInterface) TranslateTexts(ctx context.Context, texts []string, targetLang language.Tag) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateTexts", ctx, texts, targetLang)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateTexts indicates an expected call of TranslateTexts.
func (mr *MockTTSClientInterfaceMockRecorder) TranslateTexts(ctx, texts, targetLang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateTexts", reflect.TypeOf((*MockTTSClientInterface)(nil).TranslateTexts), ctx, texts, targetLang)
}

// MockGoogleTranslateClientX is a mock of GoogleTranslateClientX interface.
type MockGoogleTranslateClientX struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleTranslateClientXMockRecorder
	isgomock struct{}
}

// MockGoogleTranslateClientXMockRecorder is the mock recorder for MockGoogleTranslateClientX.
type MockGoogleTranslateClientXMockRecorder struct {
	mock *MockGoogleTranslateClientX
}

// NewMockGoogleTranslateClientX creates a new mock instance.
func NewMockGoogleTranslateClientX(ctrl *gomock.Controller) *MockGoogleTranslateClientX {
	mock := &MockGoogleTranslateClientX{ctrl: ctrl}
	mock.recorder = &MockGoogleTranslateClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleTranslateClientX) EXPECT() *MockGoogleTranslateClientXMockRecorder {
	return m.recorder
}

// DetectLanguage mocks base method.
func (m *MockGoogleTranslateClientX) DetectLanguage(arg0 context.Context, arg1 []string) ([][]translate.Detection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectLanguage", arg0, arg1)
	ret0, _ := ret[0].([][]translate.Detection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectLanguage indicates an expected call of DetectLanguage.
func (mr *MockGoogleTranslateClientXMockRecorder) DetectLanguage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLanguage", reflect.TypeOf((*MockGoogleTranslateClientX)(nil).DetectLanguage), arg0, arg1)
}

// Translate mocks base method.
func (m *MockGoogleTranslateClientX) Translate(arg0 context.Context, arg1 []string, arg2 language.Tag, arg3 *translate.Options) ([]translate.Translation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Translate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]translate.Translation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Translate indicates an expected call of Translate.
func (mr *MockGoogleTranslateClientXMockRecorder) Translate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Translate", reflect.TypeOf((*MockGoogleTranslateClientX)(nil).Translate), arg0, arg1, arg2, arg3)
}

// MockGoogleTTSClientX is a mock of GoogleTTSClientX interface.
type MockGoogleTTSClientX struct {
	ctrl     *gomock.Controller
	recorder *MockGoogleTTSClientXMockRecorder
	isgomock struct{}
}

// MockGoogleTTSClientXMockRecorder is the mock recorder for MockGoogleTTSClientX.
type MockGoogleTTSClientXMockRecorder struct {
	mock *MockGoogleTTSClientX
}

// NewMockGoogleTTSClientX creates a new mock instance.
func NewMockGoogleTTSClientX(ctrl *gomock.Controller) *MockGoogleTTSClientX {
	mock := &MockGoogleTTSClientX{ctrl: ctrl}
	mock.recorder = &MockGoogleTTSClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoogleTTSClientX) EXPECT() *MockGoogleTTSClientXMockRecorder {
	return m.recorder
}

// SynthesizeSpeech mocks base method.
func (m *MockGoogleTTSClientX) SynthesizeSpeech(arg0 context.Context, arg1 *texttospeechpb.SynthesizeSpeechRequest, arg2 ...gax.CallOption) (*texttospeechpb.SynthesizeSpeechResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynthesizeSpeech", varargs...)
	ret0, _ := ret[0].(*texttospeechpb.SynthesizeSpeechResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeSpeech indicates an expected call of SynthesizeSpeech.
func (mr *MockGoogleTTSClientXMockRecorder) SynthesizeSpeech(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeSpeech", reflect.TypeOf((*MockGoogleTTSClientX)(nil).SynthesizeSpeech), varargs...)
}
