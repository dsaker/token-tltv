// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/translates/amazonclients.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/amazonclients.go -source=internal/services/translates/amazonclients.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	polly "github.com/aws/aws-sdk-go-v2/service/polly"
	translate "github.com/aws/aws-sdk-go-v2/service/translate"
	gomock "go.uber.org/mock/gomock"
)

// MockAmazonTranslateClientX is a mock of AmazonTranslateClientX interface.
type MockAmazonTranslateClientX struct {
	ctrl     *gomock.Controller
	recorder *MockAmazonTranslateClientXMockRecorder
	isgomock struct{}
}

// MockAmazonTranslateClientXMockRecorder is the mock recorder for MockAmazonTranslateClientX.
type MockAmazonTranslateClientXMockRecorder struct {
	mock *MockAmazonTranslateClientX
}

// NewMockAmazonTranslateClientX creates a new mock instance.
func NewMockAmazonTranslateClientX(ctrl *gomock.Controller) *MockAmazonTranslateClientX {
	mock := &MockAmazonTranslateClientX{ctrl: ctrl}
	mock.recorder = &MockAmazonTranslateClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmazonTranslateClientX) EXPECT() *MockAmazonTranslateClientXMockRecorder {
	return m.recorder
}

// TranslateText mocks base method.
func (m *MockAmazonTranslateClientX) TranslateText(arg0 context.Context, arg1 *translate.TranslateTextInput, arg2 ...func(*translate.Options)) (*translate.TranslateTextOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TranslateText", varargs...)
	ret0, _ := ret[0].(*translate.TranslateTextOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateText indicates an expected call of TranslateText.
func (mr *MockAmazonTranslateClientXMockRecorder) TranslateText(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateText", reflect.TypeOf((*MockAmazonTranslateClientX)(nil).TranslateText), varargs...)
}

// MockAmazonTTSClientX is a mock of AmazonTTSClientX interface.
type MockAmazonTTSClientX struct {
	ctrl     *gomock.Controller
	recorder *MockAmazonTTSClientXMockRecorder
	isgomock struct{}
}

// MockAmazonTTSClientXMockRecorder is the mock recorder for MockAmazonTTSClientX.
type MockAmazonTTSClientXMockRecorder struct {
	mock *MockAmazonTTSClientX
}

// NewMockAmazonTTSClientX creates a new mock instance.
func NewMockAmazonTTSClientX(ctrl *gomock.Controller) *MockAmazonTTSClientX {
	mock := &MockAmazonTTSClientX{ctrl: ctrl}
	mock.recorder = &MockAmazonTTSClientXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAmazonTTSClientX) EXPECT() *MockAmazonTTSClientXMockRecorder {
	return m.recorder
}

// SynthesizeSpeech mocks base method.
func (m *MockAmazonTTSClientX) SynthesizeSpeech(arg0 context.Context, arg1 *polly.SynthesizeSpeechInput, arg2 ...func(*polly.Options)) (*polly.SynthesizeSpeechOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SynthesizeSpeech", varargs...)
	ret0, _ := ret[0].(*polly.SynthesizeSpeechOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SynthesizeSpeech indicates an expected call of SynthesizeSpeech.
func (mr *MockAmazonTTSClientXMockRecorder) SynthesizeSpeech(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SynthesizeSpeech", reflect.TypeOf((*MockAmazonTTSClientX)(nil).SynthesizeSpeech), varargs...)
}
