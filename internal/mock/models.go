// Code generated by MockGen. DO NOT EDIT.
// Source: internal/models/models.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/models.go -source=internal/models/models.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	models "talkliketv.click/tltv/internal/models"
)

// MockModelsX is a mock of ModelsX interface.
type MockModelsX struct {
	ctrl     *gomock.Controller
	recorder *MockModelsXMockRecorder
	isgomock struct{}
}

// MockModelsXMockRecorder is the mock recorder for MockModelsX.
type MockModelsXMockRecorder struct {
	mock *MockModelsX
}

// NewMockModelsX creates a new mock instance.
func NewMockModelsX(ctrl *gomock.Controller) *MockModelsX {
	mock := &MockModelsX{ctrl: ctrl}
	mock.recorder = &MockModelsXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelsX) EXPECT() *MockModelsXMockRecorder {
	return m.recorder
}

// GetLanguage mocks base method.
func (m *MockModelsX) GetLanguage(ctx context.Context, code string) (models.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage", ctx, code)
	ret0, _ := ret[0].(models.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockModelsXMockRecorder) GetLanguage(ctx, code any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockModelsX)(nil).GetLanguage), ctx, code)
}

// GetLanguageCodes mocks base method.
func (m *MockModelsX) GetLanguageCodes(ctx context.Context) (map[string]models.LanguageCode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageCodes", ctx)
	ret0, _ := ret[0].(map[string]models.LanguageCode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguageCodes indicates an expected call of GetLanguageCodes.
func (mr *MockModelsXMockRecorder) GetLanguageCodes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageCodes", reflect.TypeOf((*MockModelsX)(nil).GetLanguageCodes), ctx)
}

// GetLanguages mocks base method.
func (m *MockModelsX) GetLanguages(ctx context.Context) (map[string]models.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguages", ctx)
	ret0, _ := ret[0].(map[string]models.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguages indicates an expected call of GetLanguages.
func (mr *MockModelsXMockRecorder) GetLanguages(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguages", reflect.TypeOf((*MockModelsX)(nil).GetLanguages), ctx)
}

// GetVoice mocks base method.
func (m *MockModelsX) GetVoice(ctx context.Context, name string) (models.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoice", ctx, name)
	ret0, _ := ret[0].(models.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoice indicates an expected call of GetVoice.
func (mr *MockModelsXMockRecorder) GetVoice(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoice", reflect.TypeOf((*MockModelsX)(nil).GetVoice), ctx, name)
}

// GetVoices mocks base method.
func (m *MockModelsX) GetVoices(ctx context.Context) (map[string]models.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoices", ctx)
	ret0, _ := ret[0].(map[string]models.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoices indicates an expected call of GetVoices.
func (mr *MockModelsXMockRecorder) GetVoices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoices", reflect.TypeOf((*MockModelsX)(nil).GetVoices), ctx)
}

// GetVoicesByLanguage mocks base method.
func (m *MockModelsX) GetVoicesByLanguage(ctx context.Context, languageCode string) (map[string]models.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoicesByLanguage", ctx, languageCode)
	ret0, _ := ret[0].(map[string]models.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoicesByLanguage indicates an expected call of GetVoicesByLanguage.
func (mr *MockModelsXMockRecorder) GetVoicesByLanguage(ctx, languageCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoicesByLanguage", reflect.TypeOf((*MockModelsX)(nil).GetVoicesByLanguage), ctx, languageCode)
}

// GetVoicesByPlatform mocks base method.
func (m *MockModelsX) GetVoicesByPlatform(ctx context.Context, platform string) (map[string]models.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoicesByPlatform", ctx, platform)
	ret0, _ := ret[0].(map[string]models.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoicesByPlatform indicates an expected call of GetVoicesByPlatform.
func (mr *MockModelsXMockRecorder) GetVoicesByPlatform(ctx, platform any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoicesByPlatform", reflect.TypeOf((*MockModelsX)(nil).GetVoicesByPlatform), ctx, platform)
}

// GetVoicesByPlatformAndLanguage mocks base method.
func (m *MockModelsX) GetVoicesByPlatformAndLanguage(ctx context.Context, platform, languageCode string) (map[string]models.Voice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoicesByPlatformAndLanguage", ctx, platform, languageCode)
	ret0, _ := ret[0].(map[string]models.Voice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoicesByPlatformAndLanguage indicates an expected call of GetVoicesByPlatformAndLanguage.
func (mr *MockModelsXMockRecorder) GetVoicesByPlatformAndLanguage(ctx, platform, languageCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoicesByPlatformAndLanguage", reflect.TypeOf((*MockModelsX)(nil).GetVoicesByPlatformAndLanguage), ctx, platform, languageCode)
}
