// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/translates/translates.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/translates.go -source=internal/services/translates/translates.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	echo "github.com/labstack/echo/v4"
	gomock "go.uber.org/mock/gomock"
	language "golang.org/x/text/language"
	models "talkliketv.click/tltv/internal/models"
)

// MockTranslateX is a mock of TranslateX interface.
type MockTranslateX struct {
	ctrl     *gomock.Controller
	recorder *MockTranslateXMockRecorder
	isgomock struct{}
}

// MockTranslateXMockRecorder is the mock recorder for MockTranslateX.
type MockTranslateXMockRecorder struct {
	mock *MockTranslateX
}

// NewMockTranslateX creates a new mock instance.
func NewMockTranslateX(ctrl *gomock.Controller) *MockTranslateX {
	mock := &MockTranslateX{ctrl: ctrl}
	mock.recorder = &MockTranslateXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslateX) EXPECT() *MockTranslateXMockRecorder {
	return m.recorder
}

// CreateTTS mocks base method.
func (m *MockTranslateX) CreateTTS(e echo.Context, title models.Title, voice models.Voice, basePath string) ([]models.Phrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTTS", e, title, voice, basePath)
	ret0, _ := ret[0].([]models.Phrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTTS indicates an expected call of CreateTTS.
func (mr *MockTranslateXMockRecorder) CreateTTS(e, title, voice, basePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTTS", reflect.TypeOf((*MockTranslateX)(nil).CreateTTS), e, title, voice, basePath)
}

// DetectLanguage mocks base method.
func (m *MockTranslateX) DetectLanguage(arg0 context.Context, arg1 []string) (language.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectLanguage", arg0, arg1)
	ret0, _ := ret[0].(language.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetectLanguage indicates an expected call of DetectLanguage.
func (mr *MockTranslateXMockRecorder) DetectLanguage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectLanguage", reflect.TypeOf((*MockTranslateX)(nil).DetectLanguage), arg0, arg1)
}

// TranslatePhrases mocks base method.
func (m *MockTranslateX) TranslatePhrases(e echo.Context, title models.Title, lang models.Language) ([]models.Phrase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslatePhrases", e, title, lang)
	ret0, _ := ret[0].([]models.Phrase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslatePhrases indicates an expected call of TranslatePhrases.
func (mr *MockTranslateXMockRecorder) TranslatePhrases(e, title, lang any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslatePhrases", reflect.TypeOf((*MockTranslateX)(nil).TranslatePhrases), e, title, lang)
}
