// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/audiofile/audiofile.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=internal/mock/audiofile.go -source=internal/services/audiofile/audiofile.go
//

// Package mock is a generated GoMock package.
package mock

import (
	iter "iter"
	multipart "mime/multipart"
	os "os"
	exec "os/exec"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	interfaces "talkliketv.com/tltv/internal/interfaces"
)

// MockAudioFileX is a mock of AudioFileX interface.
type MockAudioFileX struct {
	ctrl     *gomock.Controller
	recorder *MockAudioFileXMockRecorder
	isgomock struct{}
}

// MockAudioFileXMockRecorder is the mock recorder for MockAudioFileX.
type MockAudioFileXMockRecorder struct {
	mock *MockAudioFileX
}

// NewMockAudioFileX creates a new mock instance.
func NewMockAudioFileX(ctrl *gomock.Controller) *MockAudioFileX {
	mock := &MockAudioFileX{ctrl: ctrl}
	mock.recorder = &MockAudioFileXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAudioFileX) EXPECT() *MockAudioFileXMockRecorder {
	return m.recorder
}

// BuildAudioInputFiles mocks base method.
func (m *MockAudioFileX) BuildAudioInputFiles(arg0 interfaces.Title, arg1, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAudioInputFiles", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuildAudioInputFiles indicates an expected call of BuildAudioInputFiles.
func (mr *MockAudioFileXMockRecorder) BuildAudioInputFiles(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAudioInputFiles", reflect.TypeOf((*MockAudioFileX)(nil).BuildAudioInputFiles), arg0, arg1, arg2, arg3, arg4)
}

// CreateMp3Zip mocks base method.
func (m *MockAudioFileX) CreateMp3Zip(arg0 interfaces.Title, arg1 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMp3Zip", arg0, arg1)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMp3Zip indicates an expected call of CreateMp3Zip.
func (mr *MockAudioFileXMockRecorder) CreateMp3Zip(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMp3Zip", reflect.TypeOf((*MockAudioFileX)(nil).CreateMp3Zip), arg0, arg1)
}

// CreatePhrasesZip mocks base method.
func (m *MockAudioFileX) CreatePhrasesZip(arg0 iter.Seq[[]string], arg1, arg2 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePhrasesZip", arg0, arg1, arg2)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePhrasesZip indicates an expected call of CreatePhrasesZip.
func (mr *MockAudioFileXMockRecorder) CreatePhrasesZip(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePhrasesZip", reflect.TypeOf((*MockAudioFileX)(nil).CreatePhrasesZip), arg0, arg1, arg2)
}

// GetLines mocks base method.
func (m *MockAudioFileX) GetLines(arg0 multipart.File) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLines", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLines indicates an expected call of GetLines.
func (mr *MockAudioFileXMockRecorder) GetLines(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLines", reflect.TypeOf((*MockAudioFileX)(nil).GetLines), arg0)
}

// MockcmdRunnerX is a mock of cmdRunnerX interface.
type MockcmdRunnerX struct {
	ctrl     *gomock.Controller
	recorder *MockcmdRunnerXMockRecorder
	isgomock struct{}
}

// MockcmdRunnerXMockRecorder is the mock recorder for MockcmdRunnerX.
type MockcmdRunnerXMockRecorder struct {
	mock *MockcmdRunnerX
}

// NewMockcmdRunnerX creates a new mock instance.
func NewMockcmdRunnerX(ctrl *gomock.Controller) *MockcmdRunnerX {
	mock := &MockcmdRunnerX{ctrl: ctrl}
	mock.recorder = &MockcmdRunnerXMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcmdRunnerX) EXPECT() *MockcmdRunnerXMockRecorder {
	return m.recorder
}

// CombinedOutput mocks base method.
func (m *MockcmdRunnerX) CombinedOutput(cmd *exec.Cmd) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CombinedOutput", cmd)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CombinedOutput indicates an expected call of CombinedOutput.
func (mr *MockcmdRunnerXMockRecorder) CombinedOutput(cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CombinedOutput", reflect.TypeOf((*MockcmdRunnerX)(nil).CombinedOutput), cmd)
}
