// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"file_language_id"`
	FilePath       openapi_types.File `json:"file_path"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"from_voice_id"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is beginner and repeats closer together --
	// 2 is intermediate --
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 4 is review and repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 5)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"title_name"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"to_voice_id"`

	// Token tokens are required to be able to successfully request an audio file
	Token string `json:"token"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio", wrapper.AudioFromFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RXbY8jtw3+K4TaDy0wN/btJkXrT33bFAtcgkNvW6CogwWt4cwoq6FUiWOvL9j/XlDj",
	"8Uvs5JBPtiWKpB4+fCj/aGwYYmBiyWb1o8m2pwHL14eUQtIvMYVISRyVZRsa0s+Gsk0uigtsVpMxlL3K",
	"tCENKGZlHMv9namM7CNNP6mjZN4qM1DO2P2so3n7eDRLctyZt7fKJPrf6BI1ZvVfcwg4m3//pgaO2zBl",
	"yoJW9CsN6LxZmWbMst/hnunPNgwWs9RMYirDOGiYv+s+fMKXKcvL1J7Qv3xwL/T0b3AZEDxyN2JH4AkT",
	"O+4AY/TOotpDQ9l1TA1IgJ58hDFTyhC2lGwYCKQniB6FcIQ1h1aIgdiGkYUSNbBz0kOQntIpEMaYa3gU",
	"CG2rzhAipRwYvftMzSkPeo2UHLElWPNmD+h92OnGlIMEsH0IeUoiR7KudRZinzBT1sU97JBFDdtgxwyB",
	"a/hXOWuRYYw+YANrRhB6FWidpynf2YVjiJiwSxh7UDpUEJgO25o0eMdUQUhAW2JAhk//fCqOKkBW35ra",
	"OZ475z10xJRQCBAyKQzw7cd7wLFxoRwud2vROu9EzY6ISJ/C2PXgXRbSlRrWvOb/hLHcyCYqXvnMF2RJ",
	"6LpeoE1hKFCVZRT4GLLAopgudFPXa3hsi5E48QQ9ZljzEBKd4YpcLAZ8LemjgA3cuq7+Fl+/G4ePM3oy",
	"3TaRjIkB4bOLkZopfGhPoGfI0TsBxxJmz2vmcdhQUsND5BoeIZENw0DcQBZMMmHiMuxwDznAfgaiJ/ui",
	"IA74QpDHpBxB0f1UQq55h1mLm6kBG1IiK35fr9lUxjtLnEtTH/rpLxFtT3BXL01lxqQt2IvEvFosdrtd",
	"jWW7DqlbHM7mxYfHvz189+nh3V29rHsZvPZhgfS8A7emMltKeWrM9/WyXqpdiMQYnVmZ+7JUmYjSF9ma",
	"qlXkLGS51p2ZAbe6+kSJwoSJ/trZr6IMzmmqRl0Wip1CuaGLNshqeqMJCnIqsIXmj42ipgG/SWH4xnmV",
	"N1U8yvLX0OxnXSMudxhGLy5ikoU22bsGBU8qfq3dmtvzfMFn11zDoCQKyXWO0Z+gCO2J/soUTHRAQUW5",
	"MvSKQywV+upP15pdTXG1FCWJeTpsHGPa37RPYXjeBmd/PsljbprPC4fdRRrv/3B3y29EEUp87fGwobpe",
	"dPnwc8yTftvAWdJopeyeyU0NqiA9bgnuVVOdpbyCNb9XTxvqHDOlImiJIqFksD5kSiCho6Lt797Bmu/U",
	"XKdjGqhxysOyfF/mTLNFttRceJklxVPOMM0O3c59GH0Dgf1e6VfSd+2xZChF4WaHnrbkp0hfaaREW0e7",
	"iziEdhb1wl1xAxWDA8FngOajPhE2+6l1qJnTLBQ/K87t0oyZbpe6bGkvZbKBGwVWdkR8Pm2OdSkc/V1D",
	"LY5e9FZf//4i+Nf6XMBXN4yDWb1fVmZwPP24v5FVEZ7nScyuFGMaoQjH5e0s/kUyHVs/NtNIUsiKdsy0",
	"zbcwkPBrSD9P6AL2xR3vln+87f6FbnC/LOdCkPlppW43BLjRuwTIo7WUczt6v4eDGF3Oyi8+1M6ArK5l",
	"6KcdfwnFuX7Mt/j+GDBsfiArprz8Li+mPj8cojw2yoUyxRinSgXuRtXscGnzyzjXoO8g+MfDEyyOtdQX",
	"jk4Ol8uT5HjaNXkajCckJI1UoMkx6LjTctwtlz+R9bN3z+Kzi5eS/kX9vEbiUCglYOmPOfz0xi2t8gsZ",
	"/JADX6bw20StWZnfLE5/HhaHfw6L6W/DjSRG1mepFWqAZpu3t7f/BwAA//93v5m3ggwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
