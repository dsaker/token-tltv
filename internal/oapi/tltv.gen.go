// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	FilePath openapi_types.File `json:"file_path"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"from_voice_id"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is standard and repeats closer together --
	// 2 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 3 is review and repeats each phrase one time and can be used to review already learned phrases
	Pattern string `json:"pattern"`

	// Pause the pause in seconds between phrases in the audiofile (default is 4)
	Pause string `json:"pause"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"title_name"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"to_voice_id"`

	// Token tokens are required to be able to successfully request an audio file
	Token string `json:"token"`
}

// ParseFileMultipartBody defines parameters for ParseFile.
type ParseFileMultipartBody struct {
	FilePath openapi_types.File `json:"file_path"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ParseFileMultipartRequestBody defines body for ParseFile for multipart/form-data ContentType.
type ParseFileMultipartRequestBody ParseFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error

	// (POST /parse)
	ParseFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// ParseFile converts echo context to params.
func (w *ServerInterfaceWrapper) ParseFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ParseFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio", wrapper.AudioFromFile)
	router.POST(baseURL+"/parse", wrapper.ParseFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXW8ruQ39K4TahxaYO3aSRVH4qV/ZIsDdRdCbFijqRUBrOB5tNJQqcew4i/z3ghqP",
	"P669d9un2yd7JIqkDg+P+JOxoY+BiSWbxU8m2456LH/vUwpJ/8QUIiVxVJZtaEh/G8o2uSgusFmMxlD2",
	"KtOG1KOYhXEsd7emMrKLNH7SmpJ5r0xPOeP6Zx1N24ejWZLjtXl/r0yifw8uUWMW/zL7gJP5D+9q4LgN",
	"Y6YsaEX/Uo/Om4Vphiy7Le6Y/mBDbzFLzSSmMoy9hvmL7sMnfBmzPE/tCf3LR/dCT/8AlwHBI68HXBN4",
	"wsSO14AxemdR7aGh7NZMDUiAjnyEIVPKEDaUbOgJpCOIHoVwgCWHVoiB2IaBhRI1sHXSQZCO0jEQxphr",
	"eBAIbavOECKlHBi9e6PmmAe9RkqO2BIsebUD9D5sdWPMQQLYLoQ8JpEjWdc6C7FLmCnr4g62yKKGbbBD",
	"hsA1/L2ctcgwRB+wgSUjCL0KtM7TmO/kwjFETLhOGDtQOlQQmPbbmjR4x1RBSEAbYkCGT397Ko4qQFbf",
	"mtopnlvnPayJKaEQIGRSGOC7xzvAoXGhHC53a9E670TNDohIl8Kw7sC7LKQrNSx5yf8MQ7mRTVS88okv",
	"yJLQrTuBNoW+QFWWUeAxZIFZMZ3ppq7X8NAWI3HiCTrMsOQ+JDrBFblY9Pha0kcBG7h16/o7fP1+6B8n",
	"9GS8bSIZEgPCm4uRmjF8aI+gZ8jROwHHEibPS+ahX1FSw33kGh4gkQ19T9xAFkwyYuIybHEHOcBuAqIj",
	"+6Ig9vhCkIekHEHR/VRCLnmLWYubqQEbUiIrflcv2VTGO0ucS1Pv++mPEW1HcFvPTWWGpC3YicS8mM22",
	"222NZbsOaT3bn82zjw9/vv/+0/2H23ped9J77cMC6WkHbkxlNpTy2Jg39byeq12IxBidWZi7slSZiNIV",
	"2RqrVeQsZLnUnYkB17r6SInChJH+2tmvogzOaaxGXRaKnUK5orM2yGp6pQkKciqwheYPjaKmAb9Nof/W",
	"eZU3VTzK8qfQ7CZdIy536AcvLmKSmTbZhwYFjyp+qd2a27NCUj4mlV45xrS71NrK6HWfN8FZenbNJWbK",
	"uANcyqAXDltTGXrFPpaC3fzu9prfiCKU+NLjfkP1tejj/nPIo47awFnSYKXsnrR9DdrJHW4I7lTbnKW8",
	"gCXfqKcsyA2mpghLokgoGawPmRJIWFPR2A8fYMm3RdibDbKlc/Ophz3lDKNY63buwuAbCOx3Wu+Sp2sL",
	"FpiKVKikTA49bciPke40UqKNo+1ZHEI7qWghi7ieisGeURMS01GfCJvdyFVqpjQLp06qcL0GQ6brNS1b",
	"St5MNnCTYUWyJeJTeT8UoPD9Nw21OHjRW33z29Pg31Smx1fXD71Z3Mwr0zseP+6u5FT6/HnUjosGHV8s",
	"hMPyZtLaolCOrR+a8QVQwEqrTuzM1xCQ8L9we3oQC9Rn8N7Of3/d/QtdoXhZzoUe0ySjblcEuNK7BMiD",
	"tZRzO3i/g33vnz9NvzgXnQD5eRef37s60YQp5Ykbxz794RAvrH4kK6bMWef30igf94A9NEqE8mYwjoUK",
	"vB5UIcO5zZdhrkGnDvjr/RPMDqXUeUJ12uUyABxOuyaPz9ARCEkDFWRyDPq4aDVu5/PPRPRkypi9uXgu",
	"oL+okpdI7Ouk/CvNMYUfJ8rSJ1/I4Mcc+DyFXydqzcL8anYc1Wf7OX02DulXkhhYh0Ar1ABNNu+VmZWX",
	"++efwbKdj8PO4a0bRUrnkfzFgSSMQ9CkFOOz2lx55B410td94D5rmuPh/4rvk/VE4wLGKYULlv8XjHxz",
	"8bJM+xluX6mvT8739/8EAAD//3sWhGONDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
