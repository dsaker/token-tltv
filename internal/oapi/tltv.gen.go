// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"file_language_id"`
	FilePath       openapi_types.File `json:"file_path"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"from_voice_id"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is beginner and repeats closer together --
	// 2 is intermediate --
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 4 is review and repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 5)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"title_name"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"to_voice_id"`

	// Token tokens are required to be able to successfully request an audio file
	Token string `json:"token"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio", wrapper.AudioFromFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
