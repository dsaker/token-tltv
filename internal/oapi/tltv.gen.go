// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"fileLanguageId"`
	FilePath       openapi_types.File `json:"filePath"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is beginner and repeats closer together --
	// 2 is intermediate --
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 4 is review and only repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 4)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"titleName"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"toVoiceId"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio", wrapper.AudioFromFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5RXXW8cuw39K4TahxYYz64/ELT71LR1WgNJYDRugKKbB1rDmVGsoaYSZ9ebYP97Qc3O",
	"ftib3Huf7BEp8uiQPNJ+NzZ0fWBiSWbx3STbUof539sYQ9R/+hh6iuIoL9tQkf6tKNnoenGBzWJ0hmwr",
	"TB1ih2IWxrFcX5nCyKan8ZMaimZbmI5SwuaHgSbzfmuS6Lgx221hIv1vcJEqs/iv2SWc3L9sC/MQkZNH",
	"GdGeYvfIzYAN3VX6dQzz8s1ZmH0bMWWUL3BMpn86lp+YXyd6c3Mm0YtT7fcWx4j3aE5yf9nqbsd1GIvD",
	"gjYjog6dNwtTDUk2a9ww/cWGzmKSkklMYRg7BfF3tcMnfBpPfFqNB/RP790TPXwGlwBhggOeMLLjBrDv",
	"vbOo/lBRcg1TBRKgJd/DkCgmCCuKNnQE0hL0WhocYMmhFmIgtmFgoUgVrJ20EKSleEiEfZ9KuBMIda3B",
	"EHqKKTB6942qAw567ik6Ykuw5McNoPdhrYYRgwSwbQhpBJF6sq52FkYiky5uYI0s6lgHOyQIXMK/816L",
	"DEPvA1awZAShZ4HaeRrxTiEcQ48Rm4h9C1rxAgLTzqygwTumAkIEWhEDMnz610MOVACyxlZox3yunffQ",
	"EFNEIUBIpDTAh/trwKFyIW/OZ6vROu9E3faMSBvD0LTgXRLSlRKWvOT/hCGfyEbKUfkoFiSJ6JpWoI6h",
	"y1TlZRS4D0lgll1natT1Eu7q7CROPEGLCZbchUhHvCJnjw6fM3wUsIFr15Qf8Pnj0N1P7Ml42kgyRAaE",
	"b67vqRrTh/pAeoLUeyfgWMIUeck8dI8U1XGXuYQ7iGRD1xFXkASjjJy4BGvcQAqwmYhoyT4piR0+EaQh",
	"ao+gqD3mlEteY9LiJqrAhhjJit+US9b5dJZ4VIjdPL3t0bYEV+XcFGaIOoKtSJ8Ws9l6vS4xm8sQm9lu",
	"b5q9v/vb7cdPtxdX5bxspfM6h5nS4wlcmcKsKKZxMC/LeTlXv9ATY+/MwlznpcL0KG1Wu7FaWQVDktdS",
	"O3XAuak+tETuhLH9dbKfRTs4xbEaZV7IfkrlI52MQVLXM0OQmVNdzm2uGmneasJ3MXTvnFeFUzmkJH8N",
	"1WbSNRqVthu8uB6jzHTILioUPFxcryVfsb0/kf1TErSFQnSNY/QHIkJ9aH7tE4y040DlvTD0jF2f63Pz",
	"59eXVJGz3qO0J+r/6Bjj5qx7DN3n4OwPEe6BKZgnDusTDJdvrs5F7VGEIr+OuDOopGdJ3n0OaZRuGzhJ",
	"HKxk65HSlKDi0eKK4Frl1FlKC1jypUZ6pMYxU8xaFqknlATWh0QRJDSUZf3iApZ8pe5698WOKqctmJev",
	"8xVTrZAtVSdRJjXxlBKM14aaUxsGX0Fgv9HOy/Bdva8XSha3KaCnFfkx041mirRytM6BcoQpGaGdRD33",
	"rriOsteuwSeWpv0+ElabcXSomrDmFj+q0Pn6DInO1zubdJYS2cCVsitrIj6+bfbFyV36h4pqHLzo0W7+",
	"eNqi+kLCZ9cNnVlczgvTOR4/rs+gysLzMWvZK8EYb1CE/fJq0v6smI6tH6rxRlLGsnRMrZvOUSDh17f9",
	"dD1npk8OeDX/0y++FA/HKl5qwun8HYM6GuQv+wTh8StZMfnddQpZwxziaiXyHcI4EhW4GVQxw6nPzw9a",
	"gr5C4B+3DzDbU6nvC9Vtl/KDYL/bVWm8lg4nlzhQpiL1QS8bJfpqPn8hqkevjtnXFPhUUZ1Qlzf+PlJt",
	"FuZ3s8OPhtnuF8Ps6N293XOFMeLmHFU7VdEGye074RufoLmTfxPEnyEbf8icATGwvhqtUAU0+Wy32/8H",
	"AAD//605mdQUDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
