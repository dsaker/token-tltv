// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Translates defines model for Translates.
type Translates struct {
	LanguageId int16  `json:"languageId"`
	Phrase     string `json:"phrase"`
	PhraseHint string `json:"phraseHint"`
	PhraseId   int64  `json:"phraseId"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	// FileLanguageId the original language of the file you are uploading
	FileLanguageId string             `json:"fileLanguageId"`
	FilePath       openapi_types.File `json:"filePath"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"fromVoiceId"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is beginner and repeats closer together --
	// 2 is intermediate --
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 4 is review and repeats each phrase one time and can be used to review already learned phrases
	Pattern *string `json:"pattern,omitempty"`

	// Pause the pause in seconds between phrases in the audiofile (default is 5)
	Pause *string `json:"pause,omitempty"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"titleName"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"toVoiceId"`

	// Token tokens are required to be able to successfully request an audio file
	Token string `json:"token"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /)
	Home(ctx echo.Context) error

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Home converts echo context to params.
func (w *ServerInterfaceWrapper) Home(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Home(ctx)
	return err
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.Home)
	router.POST(baseURL+"/audio", wrapper.AudioFromFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RX34/cuA3+Vwi1Dy3gePZHLmjnqdc21yyQBIvL3gFFJw9cmbZ1K1M+iZ4fF8z/XlAe",
	"z4x355K+9SUZSxRJfSS/T/vF2ND1gYklmeUXk2xLHeafb2MMUX/0MfQUxVFetqEi/b+iZKPrxQU2y9EY",
	"8l5h6hA7FLM0juX2xhRGdj2Nn9RQNPvCdJQSNr/raNo+Hk0SHTdmvy9MpF8HF6kyy/+YQ8DJ/PO+MA8R",
	"OXmUMdt57h65GbChu0q/ztO8fnMxzb6NmHKWz/KYtt45lq9svwz05vWFQM9udTxbnGd8zGYW+/NeTzuu",
	"w1gcFrQ5I+rQebM01ZBkt8Ed099s6CwmKZnEFIax0yT+qfvwCZ/GG8+r8YD+6b17ooefwSVAmNIBTxjZ",
	"cQPY995ZVHuoKLmGqQIJ0JLvYUgUE4Q1RRs6AmkJei0NDrDiUAsxENswsFCkCjZOWgjSUjwFwr5PJdwJ",
	"hLpWZwg9xRQYvfuNqlMetO0pOmJLsOLHHaD3YaMbYw4SwLYhpDGJ1JN1tbMwApl0cQcbZFHDOtghQeAS",
	"fspnLTIMvQ9YwYoRhLYCtfM05ju5cAw9Rmwi9i1oxQsITIdtTRq8YyogRKA1MSDDpx8fsqMCkNW3pnaO",
	"58Z5Dw0xRRQChEQKA3y4vwUcKhfy4Xy3Gq3zTtTsiIi0MQxNC94lIV0pYcUr/ncY8o1spOyVz3xBkoiu",
	"aQXqGLoMVV5GgfuQBBbZdKGbul7CXZ2NxIknaDHBirsQ6QxX5GzR4TanjwI2cO2a8gNuPw7d/YSejLeN",
	"JENkQPjN9T1VY/hQn0BPkHrvBBxLmDyvmIfukaIaHiKXcAeRbOg64gqSYJQRE5dggztIAXYTEC3ZJwWx",
	"wyeCNETtERTdjznkijeYtLiJKrAhRrLid+WKdT6dJR4Z4jBP3/doW4Kb8soUZog6gq1In5aLxWazKTFv",
	"lyE2i8PZtHh/94+3Hz+9fXVTXpWtdF7nMEN6PoFrU5g1xTQO5nV5VV6pXeiJsXdmaW7zUmF6lDaz3UL/",
	"aUhekuyIcm57aHUyBwc5cPYXc/cpdZl3oVO+iZT6oKmqq5urq4lq6EB+tJVFPr/8sn/BIT+eBXv38OE9",
	"9DrXdYiA8NPdCDzrkho4ToJsqRy5qMbBy7NoZxOy+CVpiEm29NcfI9Vmaf6wOOna4iBqi1HR9i9THFjp",
	"wwpVQJPNvjBju2cZCekCjNMIXaLF00zlURr5Q6lxK0oBKY7tXOaFbKe9+EgzHklqeoFFcuvNK/W9Bvwh",
	"hu4H58eS/TpQkr+HavcMv27w4nqMslCWelWh4BzCuWZqbu9nujkHQasWomscoz8BEeoTe+igYaQDBqqP",
	"haEtdn1u8Nd/fanyRY56j9LO5PPRMcbdRfMYup+Ds7+b4TExTeaJw2aWw/Wbm0teexShyC89HjZUE7Om",
	"HT6HNGqfDZwkDlby7hlVl6Ds2+Ka4Fb1yFlKS1jxtXp6pMYxU8xiEKknlATWh0QRJDSUdfHVK1jxjZrr",
	"4yF2VDltwbx8mzW6Wuv8VDMvEx17SglG3dXt1IbBVxDY77TzcvquPtYLJavD5NDTmvwY6bVGirR2tJnF",
	"IbSTIOa2FddRNjj09gTQdNRHwmo3Tg1VU5q5u8+Kc7k0Q6LLpc5bOkaJbOBKgZUNEZ8r9bEuuUH/dCAa",
	"vdV3f54F/05fl7h13dCZ5fVVYTrH48fthawyaX/MOvCCK8bXB8JxeT3pZlYbx9YP1ajmilhmjalr0yUI",
	"JPzvHT89bTLSswveXP3lsvMnutD4eTnl7pgerOr2kQAf9SYB0mAtpVQP3u/gQELzR8Y3H/UnFIvn7DOf",
	"9HMMzihjyv7zMVB4/IWsXGJ+dXfyrw2QZZ9xrE/gZlCODnObr+Nbgj4c4V9vH2BxrOBB8PQxpuR4PO2q",
	"NL4kTghIHGj/TdH9ugw6oS59Sw/P/lTaH7HCGHF3CapDBbUv89RM+f3/lXq//28AAAD///IxS3XHDgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
