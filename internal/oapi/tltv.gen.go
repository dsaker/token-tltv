// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// AudioFromFileMultipartBody defines parameters for AudioFromFile.
type AudioFromFileMultipartBody struct {
	FilePath openapi_types.File `json:"file_path"`

	// FromVoiceId the language you know
	FromVoiceId string `json:"from_voice_id"`

	// Pattern pattern is the pattern used to construct the audio files. You have 3 choices:
	// 1 is beginner and repeats closer together --
	// 2 is intermediate --
	// 3 is advanced and repeats phrases less often and should only be used if you are at an advanced level --
	// 4 is review and repeats each phrase one time and can be used to review already learned phrases
	Pattern string `json:"pattern"`

	// Pause the pause in seconds between phrases in the audiofile (default is 4)
	Pause string `json:"pause"`

	// TitleName choose a descriptive title that includes to and from languages
	TitleName string `json:"title_name"`

	// ToVoiceId the language you want to learn
	ToVoiceId string `json:"to_voice_id"`

	// Token tokens are required to be able to successfully request an audio file
	Token string `json:"token"`
}

// ParseFileMultipartBody defines parameters for ParseFile.
type ParseFileMultipartBody struct {
	FilePath openapi_types.File `json:"file_path"`
}

// AudioFromFileMultipartRequestBody defines body for AudioFromFile for multipart/form-data ContentType.
type AudioFromFileMultipartRequestBody AudioFromFileMultipartBody

// ParseFileMultipartRequestBody defines body for ParseFile for multipart/form-data ContentType.
type ParseFileMultipartRequestBody ParseFileMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /audio)
	AudioFromFile(ctx echo.Context) error

	// (POST /parse)
	ParseFile(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AudioFromFile converts echo context to params.
func (w *ServerInterfaceWrapper) AudioFromFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AudioFromFile(ctx)
	return err
}

// ParseFile converts echo context to params.
func (w *ServerInterfaceWrapper) ParseFile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ParseFile(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/audio", wrapper.AudioFromFile)
	router.POST(baseURL+"/parse", wrapper.ParseFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
